result[4,1] <- round(b@test$p.value[1], 3)
a <- adfTest(occupancy, lags=12, type=c("c"))
b <- adfTest(occupancy2, lags=12, type=c("c"))
result[1,2] <- round(a@test$statistic, 3)
result[2,2] <- round(a@test$p.value[1], 3)
result[3,2] <- round(b@test$statistic, 3)
result[4,2] <- round(b@test$p.value[1], 3)
a <-  tseries::kpss.test(occupancy, null="Level", lshort=FALSE)
b <-  tseries::kpss.test(occupancy2, null="Level", lshort=FALSE)
result[1,3] <- round(a$statistic, 3)
result[2,3] <- round(a$p.value, 3)
result[3,3] <- round(b$statistic, 3)
result[4,3] <- round(b$p.value, 3)
a <-  tseries::kpss.test(occupancy, null="Level", lshort=FALSE)
b <-  tseries::kpss.test(occupancy2, null="Level", lshort=FALSE)
result[1,4] <- round(a$statistic, 3)
result[3,4] <- round(b$statistic, 3)
a <- uroot::ch.test(occupancy, type = c("dummy"), lag1 = TRUE)
b <- uroot::ch.test(occupancy2, type = c("dummy"), lag1 = TRUE)
result[1,5] <- round(a$statistic[1], 3)
result[2,5] <- round(a$pvalues[1], 3)
result[3,5] <- round(b$statistic[1], 3)
result[4,5] <- round(b$pvalues[1], 3)
print(summary(tseries::kpss.test(occupancy2, null="Level", lshort=FALSE)))
return(result)
}
unitTest(meadowsM)
unitTest <- function(camp){
occupancy <- ts(camp$occupancy, frequency = 12)
occupancy2 <- diff(occupancy)
result <- matrix(NA, 4, 5)
colnames(result) <- c("ADF", "ADF2", "KPSS", "OCSB", "CH")
rownames(result) <- c("statistic", "p-value", "IO", "p-value2")
a <- unitrootTest(occupancy, lags=12, type=c("c"))
b <- unitrootTest(occupancy2, lags=12, type=c("c"))
result[1,1] <- round(a@test$statistic, 3)
result[2,1] <- round(a@test$p.value[1], 3)
result[3,1] <- round(b@test$statistic, 3)
result[4,1] <- round(b@test$p.value[1], 3)
a <- adfTest(occupancy, lags=12, type=c("c"))
b <- adfTest(occupancy2, lags=12, type=c("c"))
result[1,2] <- round(a@test$statistic, 3)
result[2,2] <- round(a@test$p.value[1], 3)
result[3,2] <- round(b@test$statistic, 3)
result[4,2] <- round(b@test$p.value[1], 3)
a <-  tseries::kpss.test(occupancy, null="Level", lshort=FALSE)
b <-  tseries::kpss.test(occupancy2, null="Level", lshort=FALSE)
result[1,3] <- round(a$statistic, 3)
result[2,3] <- round(a$p.value, 3)
result[3,3] <- round(b$statistic, 3)
result[4,3] <- round(b$p.value, 3)
a <-  tseries::kpss.test(occupancy, null="Level", lshort=FALSE)
b <-  tseries::kpss.test(occupancy2, null="Level", lshort=FALSE)
result[1,4] <- round(a$statistic, 3)
result[3,4] <- round(b$statistic, 3)
a <- uroot::ch.test(occupancy, type = c("dummy"), lag1 = TRUE)
b <- uroot::ch.test(occupancy2, type = c("dummy"), lag1 = TRUE)
result[1,5] <- round(a$statistic[1], 3)
result[2,5] <- round(a$pvalues[1], 3)
result[3,5] <- round(b$statistic[1], 3)
result[4,5] <- round(b$pvalues[1], 3)
print(tseries::kpss.test(occupancy2, null="Level", lshort=FALSE))
return(result)
}
unitTest(meadowsM)
unitTest <- function(camp){
occupancy <- ts(camp$occupancy, frequency = 12)
occupancy2 <- diff(occupancy)
result <- matrix(NA, 4, 5)
colnames(result) <- c("ADF", "ADF2", "KPSS", "OCSB", "CH")
rownames(result) <- c("statistic", "p-value", "IO", "p-value2")
a <- unitrootTest(occupancy, lags=12, type=c("c"))
b <- unitrootTest(occupancy2, lags=12, type=c("c"))
result[1,1] <- round(a@test$statistic, 3)
result[2,1] <- round(a@test$p.value[1], 3)
result[3,1] <- round(b@test$statistic, 3)
result[4,1] <- round(b@test$p.value[1], 3)
a <- adfTest(occupancy, lags=12, type=c("c"))
b <- adfTest(occupancy2, lags=12, type=c("c"))
result[1,2] <- round(a@test$statistic, 3)
result[2,2] <- round(a@test$p.value[1], 3)
result[3,2] <- round(b@test$statistic, 3)
result[4,2] <- round(b@test$p.value[1], 3)
a <-  tseries::kpss.test(occupancy, null="Level", lshort=FALSE)
b <-  tseries::kpss.test(occupancy2, null="Level", lshort=FALSE)
result[1,3] <- round(a$statistic, 3)
result[2,3] <- round(a$p.value, 3)
result[3,3] <- round(b$statistic, 3)
result[4,3] <- round(b$p.value, 3)
a <-  ocsb.test(occupancy, lag.method = c("fixed"), maxlag = 12)
b <-  ocsb.test(occupancy2, lag.method = c("fixed"), maxlag = 12)
result[1,4] <- round(a$statistic, 3)
result[3,4] <- round(b$statistic, 3)
a <- uroot::ch.test(occupancy, type = c("dummy"), lag1 = TRUE)
b <- uroot::ch.test(occupancy2, type = c("dummy"), lag1 = TRUE)
result[1,5] <- round(a$statistic[1], 3)
result[2,5] <- round(a$pvalues[1], 3)
result[3,5] <- round(b$statistic[1], 3)
result[4,5] <- round(b$pvalues[1], 3)
print(ocsb.test(occupancy2, lag.method = c("fixed"), maxlag = 12))
return(result)
}
unitTest(meadowsM)
unitTest(meadowsM)
unitTest(elkmontM)
unitTest(matherM)
unitTest(moraineM)
unitTest(upperM)
n_month <- unique(matherM[, month]) #130
period <- 12
#I will use 118 months of data for training regression trees methods. Forecasts will be performed to one, three, six, and twelve months ahead. Let's extract train and test set from the dataset.
data_train <- matherM[month %in% n_date[1:118]]
n_date <- unique(matherM[, month]) #130
period <- 12
#I will use 118 months of data for training regression trees methods. Forecasts will be performed to one, three, six, and twelve months ahead. Let's extract train and test set from the dataset.
data_train <- matherM[month %in% n_date[1:118]]
data_test_1 <- matherM[month %in% n_date[119]]
data_test_3 <- matherM[month %in% n_date[119:120]]
data_test_6 <- matherM[month %in% n_date[119:123]]
data_test_12 <- matherM[month %in% n_date[119:130]]
data_train$month <- as.Date(data_train$month)
ggplot(data_train, aes(month, occupancy, group=1)) +
geom_line() +
labs(x = "Date", y = "Average Occupancy (%)")  +
theme(axis.title.y = element_text(size = 9)) +
theme(axis.title.x = element_text(size = 9))  +
theme(panel.background = element_blank())   +
scale_y_continuous(breaks=seq(0,100,25))
data_ts <- ts(data_train$occupancy, freq = 12)
decomp_ts <- stl(data_ts, s.window = "periodic", robust = TRUE)$time.series
trend_part <- ts(decomp_ts[,2])
trend_fit <- auto.arima(trend_part) # ARIMA
trend_for <- as.vector(forecast(trend_fit, period)$mean) # trend forecast
data_msts <- msts(data_train$occupancy, seasonal.periods = c(period, period*12))
K <- 2
fuur <- fourier(data_msts, K = c(K, K)) # Fourier features to model (monthly and yearly)
N <- nrow(data_train)
window <- (N / period) - 1
new_load <- rowSums(decomp_ts[, c(1,3)]) # detrended original time series
lag_seas <- decomp_ts[1:(period*window), 1] # lag feature to model
matrix_train <- data.table(Load = tail(new_load, window*period),
fuur[(period + 1):N,],
Lag = lag_seas)
# create testing data matrix
test_lag <- decomp_ts[((period*window)+1):N, 1]
fuur_test <- fourier(data_msts, K = c(K, K), h = period)
matrix_test <- data.table(fuur_test,
Lag = test_lag)
N_boot <- 100 # number of bootstraps
pred_mat <- matrix(0, nrow = N_boot, ncol = period)
for(i in 1:N_boot) {
matrixSam <- matrix_train[sample(1:(N-period),
floor((N-period) * sample(seq(0.7, 0.9, by = 0.01), 1)),
replace = TRUE)] # sampling with sampled ratio from 0.7 to 0.9
tree_bag <- rpart(Load ~ ., data = matrixSam,
control = rpart.control(minsplit = sample(2:3, 1),
maxdepth = sample(26:30, 1),
cp = sample(seq(0.0000009, 0.00001, by = 0.0000001), 1)))
# new data and prediction
pred_mat[i,] <- predict(tree_bag, matrix_test) + mean(trend_for)
}
??rpart
#install.packages(c("feather", "rpart", "party", "randomForest"))
library(feather) # data import
install.packages("feather")
install.packages(c("feather", "rpart", "party", "randomForest"))
library(feather) # data import
library(rpart) # decision tree method
library(party) # decision tree method
library(randomForest) # ensemble learning method
library(ggplot2)
N_boot <- 100 # number of bootstraps
pred_mat <- matrix(0, nrow = N_boot, ncol = period)
for(i in 1:N_boot) {
matrixSam <- matrix_train[sample(1:(N-period),
floor((N-period) * sample(seq(0.7, 0.9, by = 0.01), 1)),
replace = TRUE)] # sampling with sampled ratio from 0.7 to 0.9
tree_bag <- rpart(Load ~ ., data = matrixSam,
control = rpart.control(minsplit = sample(2:3, 1),
maxdepth = sample(26:30, 1),
cp = sample(seq(0.0000009, 0.00001, by = 0.0000001), 1)))
# new data and prediction
pred_mat[i,] <- predict(tree_bag, matrix_test) + mean(trend_for)
}
pred_melt_rpart <- data.table(melt(pred_mat))
pred_ave_rpart <- pred_melt_rpart[, .(value = median(occupancy)), by = .(Var2)]
pred_ave_rpart[, Var1 := "RPART_Bagg"]
ggplot(pred_melt_rpart, aes(Var2, value, group = Var1)) +
geom_line(alpha = 0.75) +
geom_line(data = pred_ave_rpart, aes(Var2, value), color = "firebrick2", alpha = 0.9, size = 2) +
labs(x = "Time", y = "Load (kW)", title = "Bagging with RPART") +
theme_ts
ggplot(pred_melt_rpart, aes(Var2, value, group = Var1)) +
geom_line(alpha = 0.75) +
geom_line(data = pred_ave_rpart, aes(Var2, value), color = "firebrick2", alpha = 0.9, size = 2) +
labs(x = "Time", y = "Load (kW)", title = "Bagging with RPART") +
theme(axis.title.y = element_text(size = 9)) +
theme(axis.title.x = element_text(size = 9))  +
theme(panel.background = element_blank())   +
scale_y_continuous(breaks=seq(0,100,25))
pred_melt_rpart <- data.table(melt(pred_mat))
pred_ave_rpart <- pred_melt_rpart[, .(value = median(value)), by = .(Var2)]
pred_ave_rpart[, Var1 := "RPART_Bagg"]
ggplot(pred_melt_rpart, aes(Var2, value, group = Var1)) +
geom_line(alpha = 0.75) +
geom_line(data = pred_ave_rpart, aes(Var2, value), color = "firebrick2", alpha = 0.9, size = 2) +
labs(x = "Time", y = "Load (kW)", title = "Bagging with RPART") +
theme(axis.title.y = element_text(size = 9)) +
theme(axis.title.x = element_text(size = 9))  +
theme(panel.background = element_blank())   +
scale_y_continuous(breaks=seq(0,100,25))
simple_rpart <- RpartTrend(DT, n_date[1:21], K = 2)
RpartTrend <- function(data, set_of_date, K, period = 48){
data_train <- data[date %in% set_of_date]
N <- nrow(data_train)
window <- (N / period) - 1
data_ts <- msts(data_train$value, seasonal.periods = c(period, period*7))
fuur <- fourier(data_ts, K = c(K, K))
fuur_test <- as.data.frame(fourier(data_ts, K = c(K, K), h = period))
data_ts <- ts(data_train$value, freq = period*7)
decomp_ts <- stl(data_ts, s.window = "periodic", robust = TRUE)
new_load <- rowSums(decomp_ts$time.series[, c(1,3)])
trend_part <- ts(decomp_ts$time.series[,2])
trend_fit <- auto.arima(trend_part)
trend_for <- as.vector(forecast(trend_fit, period)$mean)
lag_seas <- decomp_ts$time.series[1:(period*window), 1]
matrix_train <- data.table(Load = tail(new_load, window*period),
fuur[(period+1):N,],
Lag = lag_seas)
tree_1 <- rpart(Load ~ ., data = matrix_train,
control = rpart.control(minsplit = 2,
maxdepth = 30,
cp = 0.000001))
test_lag <- decomp_ts$time.series[((period*(window))+1):N, 1]
matrix_test <- data.table(fuur_test,
Lag = test_lag)
# prediction
pred_tree <- predict(tree_1, matrix_test) + trend_for
return(as.vector(pred_tree))
}
RpartTrend <- function(data, set_of_date, K, period = 12){
data_train <- data[date %in% set_of_date]
N <- nrow(data_train)
window <- (N / period) - 1
data_ts <- msts(data_train$value, seasonal.periods = c(period, period*7))
fuur <- fourier(data_ts, K = c(K, K))
fuur_test <- as.data.frame(fourier(data_ts, K = c(K, K), h = period))
data_ts <- ts(data_train$value, freq = period*7)
decomp_ts <- stl(data_ts, s.window = "periodic", robust = TRUE)
new_load <- rowSums(decomp_ts$time.series[, c(1,3)])
trend_part <- ts(decomp_ts$time.series[,2])
trend_fit <- auto.arima(trend_part)
trend_for <- as.vector(forecast(trend_fit, period)$mean)
lag_seas <- decomp_ts$time.series[1:(period*window), 1]
matrix_train <- data.table(Load = tail(new_load, window*period),
fuur[(period+1):N,],
Lag = lag_seas)
tree_1 <- rpart(Load ~ ., data = matrix_train,
control = rpart.control(minsplit = 2,
maxdepth = 30,
cp = 0.000001))
test_lag <- decomp_ts$time.series[((period*(window))+1):N, 1]
matrix_test <- data.table(fuur_test,
Lag = test_lag)
# prediction
pred_tree <- predict(tree_1, matrix_test) + trend_for
return(as.vector(pred_tree))
}
simple_rpart <- RpartTrend(DT, n_date[1:21], K = 2)
simple_rpart <- RpartTrend(occupancy, n_date[1:21], K = 2)
simple_rpart <- RpartTrend(occupancy, n_date[1:118], K = 2)
RpartTrend <- function(data, set_of_date, K, period = 12){
data_train <- data[date %in% set_of_date]
N <- nrow(data_train)
window <- (N / period) - 1
data_ts <- msts(data_train$occupancy, seasonal.periods = c(period, period*7))
fuur <- fourier(data_ts, K = c(K, K))
fuur_test <- as.data.frame(fourier(data_ts, K = c(K, K), h = period))
data_ts <- ts(data_train$occupancy, freq = period*7)
decomp_ts <- stl(data_ts, s.window = "periodic", robust = TRUE)
new_load <- rowSums(decomp_ts$time.series[, c(1,3)])
trend_part <- ts(decomp_ts$time.series[,2])
trend_fit <- auto.arima(trend_part)
trend_for <- as.vector(forecast(trend_fit, period)$mean)
lag_seas <- decomp_ts$time.series[1:(period*window), 1]
matrix_train <- data.table(Load = tail(new_load, window*period),
fuur[(period+1):N,],
Lag = lag_seas)
tree_1 <- rpart(Load ~ ., data = matrix_train,
control = rpart.control(minsplit = 2,
maxdepth = 30,
cp = 0.000001))
test_lag <- decomp_ts$time.series[((period*(window))+1):N, 1]
matrix_test <- data.table(fuur_test,
Lag = test_lag)
# prediction
pred_tree <- predict(tree_1, matrix_test) + trend_for
return(as.vector(pred_tree))
}
simple_rpart <- RpartTrend(occupancy, n_date[1:118], K = 2)
RpartTrend <- function(data, set_of_date, K, period = 12){
data_train <- data[date %in% set_of_date]
N <- nrow(data_train)
window <- (N / period) - 1
data_ts <- msts(data_train$occupancy, seasonal.periods = c(period, period*12))
fuur <- fourier(data_ts, K = c(K, K))
fuur_test <- as.data.frame(fourier(data_ts, K = c(K, K), h = period))
data_ts <- ts(data_train$occupancy, freq = period*7)
decomp_ts <- stl(data_ts, s.window = "periodic", robust = TRUE)
new_load <- rowSums(decomp_ts$time.series[, c(1,3)])
trend_part <- ts(decomp_ts$time.series[,2])
trend_fit <- auto.arima(trend_part)
trend_for <- as.vector(forecast(trend_fit, period)$mean)
lag_seas <- decomp_ts$time.series[1:(period*window), 1]
matrix_train <- data.table(Load = tail(new_load, window*period),
fuur[(period+1):N,],
Lag = lag_seas)
tree_1 <- rpart(Load ~ ., data = matrix_train,
control = rpart.control(minsplit = 2,
maxdepth = 30,
cp = 0.000001))
test_lag <- decomp_ts$time.series[((period*(window))+1):N, 1]
matrix_test <- data.table(fuur_test,
Lag = test_lag)
# prediction
pred_tree <- predict(tree_1, matrix_test) + trend_for
return(as.vector(pred_tree))
}
simple_rpart <- RpartTrend(occupancy, n_date[1:118], K = 2)
pred_mat <- matrix(0, nrow = N_boot, ncol = period)
for(i in 1:N_boot) {
matrixSam <- matrix_train[sample(1:(N-period),
floor((N-period) * sample(seq(0.7, 0.9, by = 0.01), 1)),
replace = TRUE)] # sampling with sampled ratio from 0.7 to 0.9
tree_bag <- party::ctree(Load ~ ., data = matrixSam,
controls = party::ctree_control(teststat = c("quad"),
testtype = c("Teststatistic"),
mincriterion = sample(seq(0.88, 0.97, by = 0.005), 1),
minsplit = 1,
minbucket = 1,
mtry = 0, maxdepth = 0))
# new data and prediction
pred_mat[i,] <- predict(tree_bag, matrix_test) + mean(trend_for)
}
pred_melt_ctree <- data.table(melt(pred_mat))
pred_ave_ctree <- pred_melt_ctree[, .(value = median(value)), by = .(Var2)]
pred_ave_ctree[, Var1 := "CTREE_Bagg"]
ggplot(pred_melt_ctree, aes(Var2, value, group = Var1)) +
geom_line(alpha = 0.75) +
geom_line(data = pred_ave_ctree, aes(Var2, value), color = "firebrick2", alpha = 0.9, size = 2) +
labs(x = "Time", y = "Load (kW)", title = "Bagging with CTREE") +
theme_ts
ggplot(pred_melt_ctree, aes(Var2, value, group = Var1)) +
geom_line(alpha = 0.75) +
geom_line(data = pred_ave_ctree, aes(Var2, value), color = "firebrick2", alpha = 0.9, size = 2) +
labs(x = "Time", y = "Load (kW)", title = "Bagging with CTREE")
rf_model <- randomForest(Load ~ ., data = data.frame(matrix_train),
ntree = 1000, mtry = 3, nodesize = 5, importance = TRUE)
pred_rf <- predict(rf_model, data.frame(matrix_test)) + mean(trend_for)
pred_true <- data.table(value = data_test$value, Var2 = 1:48, Var1 = "Real")
pred_true <- data.table(value = data_test1$occupancy, Var2 = 1:48, Var1 = "Real")
pred_true <- data.table(value = data_test_1$occupancy, Var2 = 1:48, Var1 = "Real")
preds_all <- rbindlist(list(pred_ave_rpart, pred_ave_ctree, pred_rf, pred_true), use.names = T)
pred_rf <- data.table(value = pred_rf, Var2 = 1:48, Var1 = "RF")
pred_true <- data.table(value = data_test_1$occupancy, Var2 = 1:48, Var1 = "Real")
preds_all <- rbindlist(list(pred_ave_rpart, pred_ave_ctree, pred_rf, pred_true), use.names = T)
ggplot(preds_all, aes(Var2, value, color = as.factor(Var1))) +
geom_line(alpha = 0.7, size = 1.2) +
labs(x = "Time", y = "Load (kW)", title = "Comparison of Ensemble Learning forecasts") +
guides(color=guide_legend(title="Method"))
View(preds_all)
pred_true <- data.table(value = data_test_3$occupancy, Var2 = 1:48, Var1 = "Real")
preds_all <- rbindlist(list(pred_ave_rpart, pred_ave_ctree, pred_rf, pred_true), use.names = T)
ggplot(preds_all, aes(Var2, value, color = as.factor(Var1))) +
geom_line(alpha = 0.7, size = 1.2) +
labs(x = "Time", y = "Load (kW)", title = "Comparison of Ensemble Learning forecasts") +
guides(color=guide_legend(title="Method"))
pred_true <- data.table(value = data_test_12$occupancy, Var2 = 1:48, Var1 = "Real")
preds_all <- rbindlist(list(pred_ave_rpart, pred_ave_ctree, pred_rf, pred_true), use.names = T)
ggplot(preds_all, aes(Var2, value, color = as.factor(Var1))) +
geom_line(alpha = 0.7, size = 1.2) +
labs(x = "Time", y = "Load (kW)", title = "Comparison of Ensemble Learning forecasts") +
guides(color=guide_legend(title="Method"))
pred_rf <- data.table(value = pred_rf, Var2 = 1:12, Var1 = "RF")
pred_true <- data.table(value = data_test_12$occupancy, Var2 = 1:12, Var1 = "Real")
preds_all <- rbindlist(list(pred_ave_rpart, pred_ave_ctree, pred_rf, pred_true), use.names = T)
pred_rf <- data.table(value = pred_rf, Var2 = 1:12, Var1 = "RF")
pred_rf <- predict(rf_model, data.frame(matrix_test)) + mean(trend_for)
pred_rf <- data.table(value = pred_rf, Var2 = 1:12, Var1 = "RF")
pred_true <- data.table(value = data_test_12$occupancy, Var2 = 1:12, Var1 = "Real")
preds_all <- rbindlist(list(pred_ave_rpart, pred_ave_ctree, pred_rf, pred_true), use.names = T)
ggplot(preds_all, aes(Var2, value, color = as.factor(Var1))) +
geom_line(alpha = 0.7, size = 1.2) +
labs(x = "Time", y = "Load (kW)", title = "Comparison of Ensemble Learning forecasts") +
guides(color=guide_legend(title="Method"))
pred_avg <- data.table(mean(pred_ave_rpart, pred_ave_ctree, pred_rf))
pred_avg <- data.table(mean(pred_ave_rpart$value, pred_ave_ctree$value, pred_rf$value))
pred_avg$value <- data.table(mean(pred_ave_rpart$value, pred_ave_ctree$value, pred_rf$value))
pred_avg$value <- mean(pred_ave_rpart$value, pred_ave_ctree$value, pred_rf$value)
pred_avg$value <- (pred_ave_rpart$value+pred_ave_ctree$value+pred_rf$value)/3
pred_avg <- rbindlist(list(pred_ave_rpart, pred_ave_ctree, pred_rf))[, lapply(.SD, mean), by = Value2]
pred_avg <- rbindlist(list(pred_ave_rpart, pred_ave_ctree, pred_rf))[, lapply(.SD, mean), by = Var2]
pred_avg <- rbindlist(list(pred_ave_rpart, pred_ave_ctree, pred_rf))[, lapply(.SD, mean)]
pred_arg <-NULL
pred_avg <- rbindlist(list(pred_ave_rpart, pred_ave_ctree, pred_rf))[, lapply(.SD, mean)]
pred_avg <- rbindlist(list(pred_ave_rpart, pred_ave_ctree, pred_rf))
View(pred_avg)
pred_avg <- cbindlist(list(pred_ave_rpart, pred_ave_ctree, pred_rf))
pred_avg <- cbind(list(pred_ave_rpart, pred_ave_ctree, pred_rf))
View(pred_avg)
pred_avg <- cbind(pred_ave_rpart, pred_ave_ctree, pred_rf)
View(pred_avg)
pred_avg <- transform(pred_avg, average_value = rowMeans(pred_avg[,-1], na.rm = TRUE))
pred_avg[3:4]<-NELL
pred_avg[3:4]<-NULL
pred_avg <- cbind(pred_ave_rpart[1:2], pred_ave_ctree, pred_rf)
pred_avg <- cbind(pred_ave_rpart, pred_ave_ctree, pred_rf)
pred_avg <- cbind(pred_ave_rpart[1:2,], pred_ave_ctree, pred_rf)
pred_avg <- cbind(pred_ave_rpart[,1:2], pred_ave_ctree, pred_rf)
pred_avg <- cbind(pred_ave_rpart[,1:2], pred_ave_ctree[,1], pred_rf)
pred_avg <- cbind(pred_ave_rpart[,1:2], pred_ave_ctree[,1], pred_rf[,1])
pred_avg <- cbind(pred_ave_rpart[,1:2], pred_ave_ctree[,2], pred_rf[,1])
pred_avg <- transform(pred_avg, average_value = rowMeans(pred_avg[,-1], na.rm = TRUE))
pred_avg[,2;4] <-NULL
pred_avg[,2:4] <-NULL
colnames(pred_avg[2]) <- "value"
colnames(pred_avg[,2]) <- "value"
colnames(pred_avg[2]) <- "value"
colnames(pred_avg) <- c("Var2", "value")
pred_avg <- data.table(value = pred_avg$value, Var2 = 1:2, Var1 = "Average")
pred_avg <- data.table(value = pred_avg$value, Var2 = 1:12, Var1 = "Average")
pred_avg <- cbind(pred_ave_rpart[,2], pred_ave_ctree[,2], pred_rf[,1])
pred_avg <- transform(pred_avg, average_value = rowMeans(pred_avg, na.rm = TRUE))
pred_avg[,2:4] <-NULL
pred_avg <- cbind(pred_ave_rpart[,2], pred_ave_ctree[,2], pred_rf[,1])
pred_avg <- transform(pred_avg, average_value = rowMeans(pred_avg, na.rm = TRUE))
pred_avg[,1:3] <-NULL
colnames(pred_avg) <- c("Var2", "value")
colnames(pred_avg) <- c("value")
pred_avg <- data.table(value = pred_avg$value, Var2 = 1:12, Var1 = "Average")
preds_all <- rbindlist(list(pred_ave_rpart, pred_ave_ctree, pred_rf, pred_avg, pred_true), use.names = T)
ggplot(preds_all, aes(Var2, value, color = as.factor(Var1))) +
geom_line(alpha = 0.7, size = 1.2) +
labs(x = "Time", y = "Load (kW)", title = "Comparison of Ensemble Learning forecasts") +
guides(color=guide_legend(title="Method"))
RFgrid <- function(data_train, param1, param2, K, period = 12) {
N <- length(data_train)
window <- (N / period) - 1
data_ts <- msts(data_train, seasonal.periods = c(period, period*12))
fuur <- fourier(data_ts, K = c(K, K))
fuur_test <- as.data.frame(fourier(data_ts, K = c(K, K), h = period))
data_ts <- ts(data_train, freq = period)
decomp_ts <- stl(data_ts, s.window = "periodic", robust = TRUE)
new_load <- rowSums(decomp_ts$time.series[, c(1,3)])
trend_part <- ts(decomp_ts$time.series[,2])
trend_fit <- auto.arima(trend_part)
trend_for <- as.vector(forecast(trend_fit, period)$mean)
lag_seas <- decomp_ts$time.series[1:(period*window), 1]
matrix_train <- data.frame(Load = tail(new_load, window*period),
fuur[(period+1):N,],
Lag = lag_seas)
tree_2 <- randomForest(Load ~ ., data = matrix_train,
ntree = 1000, mtry = param1, nodesize = param2, importance = TRUE)
test_lag <- decomp_ts$time.series[((period*(window))+1):N, 1]
matrix_test <- data.frame(fuur_test,
Lag = test_lag)
pred_tree <- predict(tree_2, matrix_test) + mean(trend_for)
return(as.vector(pred_tree))
}
mape <- function(real, pred){
return(100 * mean(abs((real - pred)/real))) # MAPE - Mean Absolute Percentage Error
}
gridSearch <- function(Y, train.win = 21, FUN, param1, param2, period = 12) {
days <- length(Y)/period
test.days <- days - train.win
mape.matrix <- matrix(0, nrow = length(param1), ncol = length(param2))
row.names(mape.matrix) <- param1
colnames(mape.matrix) <- param2
forecast.rf <- vector(length = test.days*period)
for(i in seq_along(param1)){
for(j in seq_along(param2)){
for(k in 0:(test.days-1)){
train.set <- Y[((k*period)+1):((period*k)+(train.win*period))]
forecast.rf[((k*period)+1):((k+1)*period)] <- FUN(train.set, param1 = param1[i], param2 = param2[j], K = 2)
}
mape.matrix[i,j] <- mape(Y[-(1:(train.win*period))], forecast.rf)
}
}
return(mape.matrix)
}
all_data <- matherM$occupancy[1:(period*12)]
res_1 <- gridSearch(all_data, FUN = RFgrid, param1 = c(2,3,4,5,6), param2 = c(2,3,4,5,6))
length(matherM$occupancy)/12
gridSearch <- function(Y, train.win = 100, FUN, param1, param2, period = 12) {
days <- length(Y)
test.days <- days - train.win
mape.matrix <- matrix(0, nrow = length(param1), ncol = length(param2))
row.names(mape.matrix) <- param1
colnames(mape.matrix) <- param2
forecast.rf <- vector(length = test.days*period)
for(i in seq_along(param1)){
for(j in seq_along(param2)){
for(k in 0:(test.days-1)){
train.set <- Y[((k*period)+1):((period*k)+(train.win*period))]
forecast.rf[((k*period)+1):((k+1)*period)] <- FUN(train.set, param1 = param1[i], param2 = param2[j], K = 2)
}
mape.matrix[i,j] <- mape(Y[-(1:(train.win*period))], forecast.rf)
}
}
return(mape.matrix)
}
res_1 <- gridSearch(all_data, FUN = RFgrid, param1 = c(2,3,4,5,6), param2 = c(2,3,4,5,6))
