library(readr)
library(readr)
library(data.table)
library(psych)
setwd("~/Documents/GitHub/Allocation-dashboard")
data <- read_delim("~/Documents/GitHub/Allocation-dashboard/data/FY22 Historical Reservations Full.csv") #2022 could cause an issue due to the wildfire. 2021 & 2022 -
data <- fread("~/Documents/GitHub/Allocation-dashboard/data/FY22 Historical Reservations Full.csv") #2022 could cause an issue due to the wildfire. 2021 & 2022 -
data <- read_delim("~/Documents/GitHub/Allocation-dashboard/data/FY22 Historical Reservations Full.csv") #2022 could cause an issue due to the wildfire. 2021 & 2022 -
#Only choose those under USFS
#usfs <- data[grepl("USFS", data[["agency"]]), ]
colordao <- data[grepl("Colorado", data[["facilitystate"]]), ]
#Let's get a sample. Data is too big!
set.seed(2024)
sample <- sample_frac(colordao, 0.01)
??sample_frac
library(dplyr)
sample <- sample_frac(colordao, 0.01)
View(sample)
unique(sample$inventorytype)
unique(colordao$inventorytype)
#calculate difference between the reservation date and the start date
sample$bookingwindow <- difftime(sample$orderdate, sample$startdate, units = c("days"))
sample$bookingwindow <- -sample$bookingwindow  %>% `*`(100) %>% round(1)
head(sample$bookingwindow)
View(sample)
View(sample)
#Only choose those under USFS
#usfs <- data[grepl("USFS", data[["agency"]]), ]
penn <- data[grepl("Pennsylvania", data[["facilitystate"]]), ]
unique(penn$parentlocation)
test <- read.csv.sql("~/Documents/GitHub/Allocation-dashboard/data/FY22 Historical Reservations Full.csv",
sql = "select * from file where `facilitystate` == Colorado", eol = "\n")
library(sqldf)
library(sqldf)
test <- read.csv.sql("~/Documents/GitHub/Allocation-dashboard/data/FY22 Historical Reservations Full.csv",
sql = "select * from file where `facilitystate` == Colorado", eol = "\n")
test <- read.csv.sql("~/Documents/GitHub/Allocation-dashboard/data/FY22 Historical Reservations Full.csv",
sql = "select * from file where facilitystate == `Colorado`", eol = "\n")
test <- read.csv.sql("~/Documents/GitHub/Allocation-dashboard/data/FY22 Historical Reservations Full.csv",
sql = "select * from file where facilitystate == `Colorado`")
test <- read.csv.sql("~/Documents/GitHub/Allocation-dashboard/data/FY22 Historical Reservations Full.csv",
sql = "select * from file where facilitystate == 'Colorado'")
rm(data)
rm(penn)
data <- read_delim("~/Documents/GitHub/Allocation-dashboard/data/FY21 Historical Reservations Full.csv") #2021 could cause an issue due to the wildfire. 2021 & 2022 -
colorado21 <- data[grepl("Colorado", data[["facilitystate"]]), ]
length(colorado21)
nrow(colorado)
nrow(distinct(colorado))
colorado <- colordao
rm(colordao)
nrow(colorado)
length(colorado21)
nrow(colorado21)
rm(data)
colorado <- full_join(colorado, colorado21, by="legacyfacilityid")
colorado <- rbind(colorado, colorado21)
View(colorado)
rm(colorado21)
write.csv(colorado, "colorado_raw.csv")
unique(colorado$agency) #Agencies: "BAH", "BLM", "BOR", "FWS", "NARA", "NPS" , "Presidio Trust", "USACE", "USFS" - all agencies
unique(colorado$inventorytype)
require(tidyr)
require(reshape2)
require(lubridate)
list <- c("agency", "regiondescription", "parentlocation", "sitetype", "usetype", "inventorytype", "facilitystate")
colorado[,list] <- lapply(colorado[,list] , as.factor) #change all data to numeric
categorize <- function(x) {
# Count the number of missing values
nmiss <- sum(is.na(x))
# Frequency
n     <- table(x)
# Proportion
p     <- prop.table(n) %>% `*`(100) %>% round(2)
# Putting it together
OUT   <- cbind(n, p)
# Add nmiss, but first pad to have the right number of rows
nmiss <- c(nmiss, rep(NA, nrow(OUT)-1))
OUT   <- cbind(OUT, nmiss)
OUT   <- OUT[order(-n),]
return(OUT)
}
#sample %>% summarise_all(n_distinct)
categorize(colorado$usetype)
categorize(colorado$regiondescription)
categorize(colorado$parentlocation)
categorize(colorado$inventorytype)
categorize(colorado$parentlocation, colorado$inventorytype)
colorado %>%
group_by(parentlocation) %>%
categorize(inventorytype)
colorado %>%
group_by(parentlocation) %>%
summarise(inventorytype)
colorado %>%
group_by(parentlocation) %>%
table(inventorytype)
nrow(colorado)
#calculate difference between the reservation date and the start date
range(colorado$orderdate)
range(colorado$startdate)
range(colorado$orderdate) #some odd order dates like
range(colorado$startdate) #
range(colorado$orderdate) #some odd order dates like 0001-01-01 00:00:00 UTC
range(colorado$startdate) #some start dates are in 2020 - need to remove.
range(colorado$enddate)
range(colorado$enddate)
range(colorado$startdate[colorado$startdate>2020-12-31,])
range(colorado$startdate[colorado$startdate>"2020-12-31",])
range(colorado$startdate[year(colorado$startdate) >2020,])
head(colordo[year(colorado$startdate) > 2020,])
head(colorado[year(colorado$startdate) > 2020,])
test <- colorado[year(colorado$startdate) > 2020,]
range(test4startdate)
range(test$startdate)
rm(test)
colorado <- colorado[year(colorado$startdate) > 2020,] #keep only those that started in 2020.
View(sample)
colorado <- read.csv("~/Documents/GitHub/Allocation-dashboard/data/colorado_raw.csv")
colorado <- read.csv("~/Documents/GitHub/Allocation-dashboard/data/colorado_raw.csv")
list <- c("agency", "regiondescription", "parentlocation", "sitetype", "usetype", "inventorytype", "facilitystate")
colorado[,list] <- lapply(colorado[,list] , as.factor) #change all data to numeric
range(colorado$startdate) #some start dates are in 2020 - may need to remove. Keeping for now since it could be a permit that lasts for longer than few months. The latest start date is 2022-09-30 UTC
range(colorado$enddate)
colorado %>%
mutate(bookingwindow = difftime(startdate, orderdate, units = "days"))
View(colorado)
colorado %>%
mutate(bookingwindow = difftime(startdate, orderdate, units = 'days'))
head(sample$bookingwindow)
head(colorado$bookingwindow)
View(colorado)
colorado$bookingwindow <- difftime(colorado$startdate, colorado$orderdate, units = 'days'))
colorado$bookingwindow <- difftime(colorado$startdate, colorado$orderdate, units = 'days')
head(colorado$bookingwindow)
View(colorado)
negativebw <- colorado[colorado$bookingwindow<0,]
View(negativebw)
categorize <- function(x) {
# Count the number of missing values
nmiss <- sum(is.na(x))
# Frequency
n     <- table(x)
# Proportion
p     <- prop.table(n) %>% `*`(100) %>% round(2)
# Putting it together
OUT   <- cbind(n, p)
# Add nmiss, but first pad to have the right number of rows
nmiss <- c(nmiss, rep(NA, nrow(OUT)-1))
OUT   <- cbind(OUT, nmiss)
OUT   <- OUT[order(-n),]
return(OUT)
}
categorize(negativebw$parentlocation)
#calculate difference between the reservation date and the start date
colorado$lengthstay <- difftime(colorado$enddate, colorado$startdate, units = 'days')
head(colorado$lengthstay)
negativels <- colorado[colorado$lengthstay<0,]
categorize(negativels$parentlocation)
View(negativels)
sample <- sample_frac(colordao, 0.01)
set.seed(20240202)
sample <- sample_frac(colorado, 0.01)
#make the data into panel format and create date variable which is the list of dates that were occupied
sample <-sample[,cbind(.SD, date=(as.Date(startdate)):as.Date(enddate)), by="historicalreservationid"]
#calculate average daily fee per transaction
sample$avgfee <- sample$usefee/df$lengthstay
#calculate average daily fee per transaction
sample$avgfee <- sample$usefee/sample$lengthstay
sample$lengthstay <- as.numeric(sample$lengthstay)
View(sample)
#calculate average daily fee per transaction
sample$avgfee <- sample$usefee/sample$lengthstay
sample$avgtotalfee <- sample$totalpaid/sample$lengthstay
View(sample)
View(colorado)
