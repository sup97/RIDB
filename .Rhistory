unitTest(elkmontM)
unitTest(matherM)
unitTest(meadowsM)
unitTest(elkmontM)
unitTest(matherM)
unitTest(upperM)
unitTest(moraineM)
unitTest(upperM)
occupancy <- ts(upperM$occupancy, frequency = 12)
ocsb.test(occupancy, lag.method = c("fixed"), maxlag = 12)
tseries::kpss.test(occupancy, null="Level", lshort=FALSE)
occupancy <- ts(moraineM$occupancy, frequency = 12)
ocsb.test(occupancy, lag.method = c("fixed"), maxlag = 12)
tseries::kpss.test(occupancy, null="Level", lshort=FALSE)
ocsb.test(occupancy, lag.method = c("fixed"), maxlag = 12)
sarimaProcess <- function(data, N){
occupancy <- ts(data$occupancy, frequency = 12, start = c(2007, 5))
if(N<10){
train <- window(occupancy, end=c(2017,8-N))
} else {
train <- window(occupancy, end=c(2016,8))
}
arimafit <- auto.arima(train, lambda="auto", max.P=0, max.Q=0, seasonal = TRUE, trace = FALSE,
test = c("kpss", "adf", "pp"),
seasonal.test = c("seas", "ocsb", "hegy", "ch"),
approximation= FALSE,
allowmean = TRUE,
allowdrift = TRUE)
ARIMA <- forecast(arimafit, h=N)
print(summary(ARIMA))
fitted <- ARIMA$mean
n <- length(train)+1
m <- n+N-1
if(N<10){
compare <- ts(occupancy[n:m], frequency = 12, start = c(2017,9-N))
} else {
compare <- ts(occupancy[n:m], frequency = 12, start = c(2016,9))
}
e <- abs((compare-fitted)/compare) * 100
e <- ifelse(is.na(e)==TRUE, 0, e)
e <- ifelse(e==Inf, 0, e)
print(forecast::accuracy(ARIMA$mean, occupancy))
print(mean(e))
autoplot(compare) +
autolayer(ARIMA, series="SARIMA", alpha=0.5) +
xlab("") + ylab("Occupancy (%)")  +
theme(panel.background = element_blank()) +
scale_y_continuous(breaks=seq(0,100,25))
}
require("knitr")
opts_knit$set(root.dir = "~/Documents/GitHub/RIDB/data")
#install.packages(c("readr", "data.table", "psych","dplyr", "tidyr", "reshape2", "lubridate", "forecast", "astsa", "zoo", "nowcasting", "TSstudio", "ggplot2", "pastecs","readxl", "grid", "gridExtra", "kableExtra","knitr", "fpp2", "tstools", "tseries", "plotly", "scales","midasr"))
library(readr)
library(data.table)
library(psych)
library(dplyr)
library(tidyr)
library(reshape2)
library(lubridate)
library(forecast)
library(astsa)
library(zoo)
library(nowcasting)
library(TSstudio)
library(ggplot2)
library(pastecs)
library(readxl)
library(gridExtra)
library(grid)
library(kableExtra)
library(knitr)
library(fpp2)
library(tstools)
library(tseries)
library(plotly)
library(scales)
library(midasr)
library(tsfknn)
require("knitr")
opts_knit$set(root.dir = "~/Documents/GitHub/RIDB/data")
rm(list=ls())
#load functions
source("~/GitHub/RIDB/formatCamp.R")
source("~/GitHub/RIDB/unitTest.R")
source("~/GitHub/RIDB/campMGraph.R")
#load data
data <- fread("~/GitHub/RIDB/data/final_data.csv")
#unique(data$id[data$Campground=="MATHER CAMPGROUND"]) #65
formatCamp(65)
matherD <- fread("descriptive_65.csv")
mather <- fread("campground_65.csv")
matherM <- fread("campground_monthly_65.csv")
#unique(data$id[data$Campground=="MORAINE PARK CAMPGROUND"]) #67
formatCamp(67)
moraineD <- fread("descriptive_67.csv")
moraine <- fread("campground_67.csv")
moraineM <- fread("campground_monthly_67.csv")
#unique(data$id[data$Campground=="UPPER PINES"]) #106
formatCamp(106)
upperD <- fread("descriptive_106.csv")
upper <- fread("campground_106.csv")
upperM <- fread("campground_monthly_106.csv")
#unique(data$id[data$Campground=="BIG MEADOWS"]) #7
formatCamp(7)
meadowsD <- fread("descriptive_7.csv")
meadows <- fread("campground_7.csv")
meadowsM <- fread("campground_monthly_7.csv")
#unique(data$id[data$Campground=="ELKMONT CAMPGROUND"]) #42
formatCamp(42)
elkmontD <- fread("descriptive_42.csv")
elkmont <- fread("campground_42.csv")
elkmontM <- fread("campground_monthly_42.csv")
#unique(data$id[data$Campground=="BLACKWOODS CAMPGROUND"]) #11
#formatCamp(11)
#black <- fread("campground_monthly_11.csv") #weird occupancy
#unique(data$id[data$Campground=="FLAMINGO"]) #45
#formatCamp(45)
#flamingo <- fread("campground_monthly_45.csv") #weird occupancy
#for consistency, start all camp data from 2007 May
elkmontM <- elkmontM[which(elkmontM$month>"2007-04-01")]
matherM <- matherM[which(matherM$month>"2007-04-01")]
meadowsM <- meadowsM[which(meadowsM$month>"2007-04-01")]
moraineM <- moraineM[which(moraineM$month>"2007-04-01")]
upperM <- upperM[which(upperM$month>"2007-04-01")]
source("~/GitHub/RIDB/sarimaProcess.R")
sarimaProcess(elkmontM, 6)
sarimaProcess(meadowsM, 6)
sarimaProcess(elkmontM, 6)
sarimaProcess(matherM, 6)
sarimaProcess(moraineM, 6)
sarimaProcess(upperM, 6)
nnarProcess <- function(data, N){
occupancy <- ts(data$occupancy, frequency = 12, start = c(2007, 5))
if(N<10){
train <- window(occupancy, end=c(2017,8-N))
} else {
train <- window(occupancy, end=c(2016,8))
}
fit <- nnetar(train, P=12, lambda = "auto", repeats = 100)
NNAR <- forecast(fit, h=N)
print(summary(NNAR))
fitted <- NNAR$mean
n <- length(train)+1
m <- n+N-1
if(N<10){
compare <- ts(occupancy[n:m], frequency = 12, start = c(2017,9-N))
} else {
compare <- ts(occupancy[n:m], frequency = 12, start = c(2016,9))
}
e <- abs((compare-fitted)/compare) * 100
e <- ifelse(is.na(e)==TRUE, 0, e)
e <- ifelse(e==Inf, 0, e)
print(forecast::accuracy(NNAR$mean, occupancy))
print(mean(e))
autoplot(compare) +
autolayer(NNAR, series="NNAR", alpha=0.5) +
xlab("") + ylab("Occupancy (%)")  +
theme(panel.background = element_blank()) +
scale_y_continuous(breaks=seq(0,100,25))
}
require("knitr")
opts_knit$set(root.dir = "~/Documents/GitHub/RIDB/data")
#install.packages(c("readr", "data.table", "psych","dplyr", "tidyr", "reshape2", "lubridate", "forecast", "astsa", "zoo", "nowcasting", "TSstudio", "ggplot2", "pastecs","readxl", "grid", "gridExtra", "kableExtra","knitr", "fpp2", "tstools", "tseries", "plotly", "scales","midasr"))
library(readr)
library(data.table)
library(psych)
library(dplyr)
library(tidyr)
library(reshape2)
library(lubridate)
library(forecast)
library(astsa)
library(zoo)
library(nowcasting)
library(TSstudio)
library(ggplot2)
library(pastecs)
library(readxl)
library(gridExtra)
library(grid)
library(kableExtra)
library(knitr)
library(fpp2)
library(tstools)
library(tseries)
library(plotly)
library(scales)
library(midasr)
library(tsfknn)
require("knitr")
opts_knit$set(root.dir = "~/Documents/GitHub/RIDB/data")
rm(list=ls())
#load functions
source("~/GitHub/RIDB/formatCamp.R")
source("~/GitHub/RIDB/unitTest.R")
source("~/GitHub/RIDB/campMGraph.R")
#load data
data <- fread("~/GitHub/RIDB/data/final_data.csv")
#unique(data$id[data$Campground=="MATHER CAMPGROUND"]) #65
formatCamp(65)
matherD <- fread("descriptive_65.csv")
mather <- fread("campground_65.csv")
matherM <- fread("campground_monthly_65.csv")
#unique(data$id[data$Campground=="MORAINE PARK CAMPGROUND"]) #67
formatCamp(67)
moraineD <- fread("descriptive_67.csv")
moraine <- fread("campground_67.csv")
moraineM <- fread("campground_monthly_67.csv")
#unique(data$id[data$Campground=="UPPER PINES"]) #106
formatCamp(106)
upperD <- fread("descriptive_106.csv")
upper <- fread("campground_106.csv")
upperM <- fread("campground_monthly_106.csv")
#unique(data$id[data$Campground=="BIG MEADOWS"]) #7
formatCamp(7)
meadowsD <- fread("descriptive_7.csv")
meadows <- fread("campground_7.csv")
meadowsM <- fread("campground_monthly_7.csv")
#unique(data$id[data$Campground=="ELKMONT CAMPGROUND"]) #42
formatCamp(42)
elkmontD <- fread("descriptive_42.csv")
elkmont <- fread("campground_42.csv")
elkmontM <- fread("campground_monthly_42.csv")
#unique(data$id[data$Campground=="BLACKWOODS CAMPGROUND"]) #11
#formatCamp(11)
#black <- fread("campground_monthly_11.csv") #weird occupancy
#unique(data$id[data$Campground=="FLAMINGO"]) #45
#formatCamp(45)
#flamingo <- fread("campground_monthly_45.csv") #weird occupancy
#for consistency, start all camp data from 2007 May
elkmontM <- elkmontM[which(elkmontM$month>"2007-04-01")]
matherM <- matherM[which(matherM$month>"2007-04-01")]
meadowsM <- meadowsM[which(meadowsM$month>"2007-04-01")]
moraineM <- moraineM[which(moraineM$month>"2007-04-01")]
upperM <- upperM[which(upperM$month>"2007-04-01")]
nnarProcess(meadowsM, 6)
nnarProcess <- function(data, N){
occupancy <- ts(data$occupancy, frequency = 12, start = c(2007, 5))
if(N<10){
train <- window(occupancy, end=c(2017,8-N))
} else {
train <- window(occupancy, end=c(2016,8))
}
fit <- nnetar(train, P=12, lambda = "auto", repeats = 100)
NNAR <- forecast(fit, h=N)
print(summary(NNAR))
fitted <- NNAR$mean
n <- length(train)+1
m <- n+N-1
if(N<10){
compare <- ts(occupancy[n:m], frequency = 12, start = c(2017,9-N))
} else {
compare <- ts(occupancy[n:m], frequency = 12, start = c(2016,9))
}
e <- abs((compare-fitted)/compare) * 100
e <- ifelse(is.na(e)==TRUE, 0, e)
e <- ifelse(e==Inf, 0, e)
print(forecast::accuracy(NNAR$mean, occupancy))
print(mean(e))
autoplot(compare) +
autolayer(NNAR, series="NNAR", alpha=0.5) +
xlab("") + ylab("Occupancy (%)")  +
theme(panel.background = element_blank()) +
scale_y_continuous(breaks=seq(0,100,25))
}
nnarProcess(meadowsM, 6)
nnarProcess <- function(data, N){
occupancy <- ts(data$occupancy, frequency = 12, start = c(2007, 5))
if(N<10){
train <- window(occupancy, end=c(2017,8-N))
} else {
train <- window(occupancy, end=c(2016,8))
}
fit <- nnetar(train, P=N, lambda = "auto", repeats = 100)
NNAR <- forecast(fit, h=N)
print(summary(NNAR))
fitted <- NNAR$mean
n <- length(train)+1
m <- n+N-1
if(N<10){
compare <- ts(occupancy[n:m], frequency = 12, start = c(2017,9-N))
} else {
compare <- ts(occupancy[n:m], frequency = 12, start = c(2016,9))
}
e <- abs((compare-fitted)/compare) * 100
e <- ifelse(is.na(e)==TRUE, 0, e)
e <- ifelse(e==Inf, 0, e)
print(forecast::accuracy(NNAR$mean, occupancy))
print(mean(e))
autoplot(compare) +
autolayer(NNAR, series="NNAR", alpha=0.5) +
xlab("") + ylab("Occupancy (%)")  +
theme(panel.background = element_blank()) +
scale_y_continuous(breaks=seq(0,100,25))
}
nnarProcess(meadowsM, 3)
nnarProcess <- function(data, N){
occupancy <- ts(data$occupancy, frequency = 12, start = c(2007, 5))
if(N<10){
train <- window(occupancy, end=c(2017,8-N))
} else {
train <- window(occupancy, end=c(2016,8))
}
fit <- nnetar(train, P=12, lambda = "auto", repeats = 100)
NNAR <- forecast(fit, h=N)
print(summary(NNAR))
fitted <- NNAR$mean
n <- length(train)+1
m <- n+N-1
if(N<10){
compare <- ts(occupancy[n:m], frequency = 12, start = c(2017,9-N))
} else {
compare <- ts(occupancy[n:m], frequency = 12, start = c(2016,9))
}
e <- abs((compare-fitted)/compare) * 100
e <- ifelse(is.na(e)==TRUE, 0, e)
e <- ifelse(e==Inf, 0, e)
print(forecast::accuracy(NNAR$mean, occupancy))
print(mean(e))
autoplot(compare) +
autolayer(NNAR, series="NNAR", alpha=0.5) +
xlab("") + ylab("Occupancy (%)")  +
theme(panel.background = element_blank()) +
scale_y_continuous(breaks=seq(0,100,25))
}
nnarProcess(meadowsM, 3)
nnarProcess(meadowsM, 6)
nnarProcess <- function(data, N){
occupancy <- ts(data$occupancy, frequency = 12, start = c(2007, 5))
if(N<10){
train <- window(occupancy, end=c(2017,8-N))
} else {
train <- window(occupancy, end=c(2016,8))
}
fit <- nnetar(train, P=8, lambda = "auto", repeats = 100)
NNAR <- forecast(fit, h=N)
print(summary(NNAR))
fitted <- NNAR$mean
n <- length(train)+1
m <- n+N-1
if(N<10){
compare <- ts(occupancy[n:m], frequency = 12, start = c(2017,9-N))
} else {
compare <- ts(occupancy[n:m], frequency = 12, start = c(2016,9))
}
e <- abs((compare-fitted)/compare) * 100
e <- ifelse(is.na(e)==TRUE, 0, e)
e <- ifelse(e==Inf, 0, e)
print(forecast::accuracy(NNAR$mean, occupancy))
print(mean(e))
autoplot(compare) +
autolayer(NNAR, series="NNAR", alpha=0.5) +
xlab("") + ylab("Occupancy (%)")  +
theme(panel.background = element_blank()) +
scale_y_continuous(breaks=seq(0,100,25))
}
nnarProcess(meadowsM, 6)
nnarProcess(elkmontM, 6)
nnarProcess(elkmontM, 12)
nnarProcess(meadowsM, 12)
require("knitr")
opts_knit$set(root.dir = "~/Documents/GitHub/RIDB/data")
#install.packages(c("readr", "data.table", "psych","dplyr", "tidyr", "reshape2", "lubridate", "forecast", "astsa", "zoo", "nowcasting", "TSstudio", "ggplot2", "pastecs","readxl", "grid", "gridExtra", "kableExtra","knitr", "fpp2", "tstools", "tseries", "plotly", "scales","midasr"))
library(readr)
library(data.table)
library(psych)
library(dplyr)
library(tidyr)
library(reshape2)
library(lubridate)
library(forecast)
library(astsa)
library(zoo)
library(nowcasting)
library(TSstudio)
library(ggplot2)
library(pastecs)
library(readxl)
library(gridExtra)
library(grid)
library(kableExtra)
library(knitr)
library(fpp2)
library(tstools)
library(tseries)
library(plotly)
library(scales)
library(midasr)
library(tsfknn)
require("knitr")
opts_knit$set(root.dir = "~/Documents/GitHub/RIDB/data")
rm(list=ls())
#load functions
source("~/GitHub/RIDB/formatCamp.R")
source("~/GitHub/RIDB/unitTest.R")
source("~/GitHub/RIDB/campMGraph.R")
#load data
data <- fread("~/GitHub/RIDB/data/final_data.csv")
#unique(data$id[data$Campground=="MATHER CAMPGROUND"]) #65
formatCamp(65)
matherD <- fread("descriptive_65.csv")
mather <- fread("campground_65.csv")
matherM <- fread("campground_monthly_65.csv")
#unique(data$id[data$Campground=="MORAINE PARK CAMPGROUND"]) #67
formatCamp(67)
moraineD <- fread("descriptive_67.csv")
moraine <- fread("campground_67.csv")
moraineM <- fread("campground_monthly_67.csv")
#unique(data$id[data$Campground=="UPPER PINES"]) #106
formatCamp(106)
upperD <- fread("descriptive_106.csv")
upper <- fread("campground_106.csv")
upperM <- fread("campground_monthly_106.csv")
#unique(data$id[data$Campground=="BIG MEADOWS"]) #7
formatCamp(7)
meadowsD <- fread("descriptive_7.csv")
meadows <- fread("campground_7.csv")
meadowsM <- fread("campground_monthly_7.csv")
#unique(data$id[data$Campground=="ELKMONT CAMPGROUND"]) #42
formatCamp(42)
elkmontD <- fread("descriptive_42.csv")
elkmont <- fread("campground_42.csv")
elkmontM <- fread("campground_monthly_42.csv")
#unique(data$id[data$Campground=="BLACKWOODS CAMPGROUND"]) #11
#formatCamp(11)
#black <- fread("campground_monthly_11.csv") #weird occupancy
#unique(data$id[data$Campground=="FLAMINGO"]) #45
#formatCamp(45)
#flamingo <- fread("campground_monthly_45.csv") #weird occupancy
#for consistency, start all camp data from 2007 May
elkmontM <- elkmontM[which(elkmontM$month>"2007-04-01")]
matherM <- matherM[which(matherM$month>"2007-04-01")]
meadowsM <- meadowsM[which(meadowsM$month>"2007-04-01")]
moraineM <- moraineM[which(moraineM$month>"2007-04-01")]
upperM <- upperM[which(upperM$month>"2007-04-01")]
sarimaProcess(meadowsM, 6)
source("~/GitHub/RIDB/sarimaProcess.R")
sarimaProcess(meadowsM, 6)
sarimaProcess(elkmontM, 6)
sarimaProcess(matherM, 6)
sarimaProcess(moraineM, 6)
sarimaProcess(upperM, 6)
etsProcess(elkmontM, 6)
source("~/Documents/GitHub/RIDB/etsProcess.R")
source("~/GitHub/RIDB/etsProcess.R")
etsProcess(elkmontM, 6)
etsProcess(meadowsM, 6)
etsProcess(moraineM, 6)
etsProcess(upperM, 6)
nnarProcess(elkmontM, 6)
source("~/GitHub/RIDB/nnarProcess.R")
nnarProcess(elkmontM, 6)
nnarProcess(matherM, 6)
nnarProcess(meadowsM, 6)
nnarProcess(moraineM, 6)
nnarProcess(upperM, 6)
knnProcess(elkmontM, 6)
source("~/GitHub/RIDB/knnProcess.R")
knnProcess(elkmontM, 6)
knnProcess(matherM, 6)
knnProcess(meadowsM, 6)
knnProcess(moraineM, 6)
knnProcess(upperM, 6)
knnProcess <- function(data, N){
occupancy <- ts(data$occupancy, frequency = 12, start = c(2007, 5))
if(N<10){
train <- window(occupancy, end=c(2017,8-N))
} else {
train <- window(occupancy, end=c(2016,8))
}
pred <- knn_forecasting(train, h = N, lags = 1:12, k = 3, msas = "MIMO")
fitted <- pred$prediction
print(summary(pred))
n <- length(train)+1
m <- n+N-1
if(N<10){
compare <- ts(occupancy[n:m], frequency = 12, start = c(2017,9-N))
} else {
compare <- ts(occupancy[n:m], frequency = 12, start = c(2016,9))
}
e <- abs((compare-fitted)/compare) * 100
e <- ifelse(is.na(e)==TRUE, 0, e)
e <- ifelse(e==Inf, 0, e)
print(forecast::accuracy(pred$prediction, occupancy))
print(mean(e))
autoplot(compare) +
autolayer(fitted, series="KNN", alpha=0.5) +
xlab("") + ylab("Occupancy (%)")  +
theme(panel.background = element_blank()) +
scale_y_continuous(breaks=seq(0,100,25))
}
knnProcess(elkmontM, 6)
knnProcess(matherM, 6)
knnProcess(meadowsM, 6)
knnProcess(moraineM, 6)
knnProcess(upperM, 6)
knnProcess(moraineM, 6)
knnProcess(matherM, 6)
nnarProcess(moraineM, 6)
nnarProcess(matherM, 6)
etsProcess(matherM, 6)
etsProcess(moraineM, 6)
source("~/GitHub/RIDB/sarimaProcess.R")
sarimaProcess(elkmontM, 3)
sarimaProcess(matherM, 3)
sarimaProcess(meadowsM, 3)
sarimaProcess(moraineM, 3)
sarimaProcess(upperM, 3)
sarimaProcess(meadowsM, 6)
sarimaProcess(elkmontM, 6)
sarimaProcess(matherM, 6)
sarimaProcess(moraineM, 6)
